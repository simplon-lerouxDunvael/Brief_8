schedules:
- cron: "0 * * * *" # cron syntax defining the schedule - every hour at 0'
  displayName: Hourly main schedule # friendly name given to a specific schedule
  branches:
    include: # which branches the schedule applies to
    - main 
#    exclude: # which branches to exclude from the schedule
#    - [string]
  always: false # whether to always run the pipeline or only if there have been source code changes since the last successful scheduled run. The default is false.

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:

- task: Kubernetes@1
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'Kubernetes Service Connection'
    command: 'login'


- task: CmdLine@2
  inputs:
    script: |
      set -x
      pwd
      ls -la
      # Retrieve the version of the image into file for secret
      VERVAR=$(curl 'https://hub.docker.com/v2/repositories/simplonasa/azure_voting_app/tags' | jq '."results"[0]["name"]'|sed -e 's/^"//' -e 's/"$//' <<<"$VERVAR")
      echo "$VERVAR"|sed 's/^.//;s/.$//' >./version.vote
      cat ./version.vote
      # Retrieve the value of the secret
      VERCUR=$(kubectl get secret version-secret -o jsonpath='{.data}'|awk -F ':' '{print $2}' | sed 's/\"//g; s/}//g')
      VERCUR=$(echo "$VAR1" | base64 -d)
      echo "$VERCUR"
      if [ $? -ne 0 ]; then
        # secret does not exist
        kubectl create secret generic version-secret --from-literal=version=$VERVAR
      elif [ "$VERVAR" != "$VERCUR" ]; then
        # Update the secret with the new version number
        kubectl patch secret version-secret -p "{\"data\":{\"version\":\"$VERVAR\"}}"
      else
        echo "The version in the secret is the same as the version found"
      fi

- task: Kubernetes@1
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'Kubernetes Service Connection'
    command: 'apply'
    useConfigurationFile: true
    configuration: '/home/vsts/work/1/s/vote-renew.yaml'
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'
  displayName: 'K8s Infra'
  condition: and(succeeded(), ne(variables['VERVAR'], variables['VERCUR']))


